import nltk
import ssl
from nltk.tokenize import word_tokenize
from nltk.tag import pos_tag
from flask import Flask, request, render_template, jsonify
import requests
import re
from fuzzywuzzy import fuzz
from data.places import city_names, test_data

nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')

try:
    _create_unverified_https_context = ssl._create_unverified_context
except AttributeError:
    pass
else:
    ssl._create_default_https_context = _create_unverified_https_context

app = Flask(__name__)

API_KEY = ""
BASE_URL = "http://api.openweathermap.org/data/2.5/weather"

# Custom list of Kannada stopwords
kannada_stopwords = set([' ‡≤®‡≤≤‡≥ç‡≤≤‡≤ø', '‡≤ó‡≥Ü', '‡≤Æ‡≤§‡≥ç‡≤§‡≥Å', '‡≤Ü‡≤¶‡≤∞‡≥Ü', '‡≤Ü‡≤¶‡≥ç‡≤¶‡≤∞‡≤ø‡≤Ç‡≤¶', '‡≤à', '‡≤á‡≤¶‡≥Å', '‡≤à‡≤ó', '‡≤á‡≤≤‡≥ç‡≤≤', '‡≤é‡≤Ç‡≤¶‡≥Å', '‡≤í‡≤Ç‡≤¶‡≥Å', '‡≤®‡≤æ‡≤®‡≥Å', '‡≤®‡≥Ä‡≤µ‡≥Å', '‡≤®‡≤Æ‡≥ç‡≤Æ', '‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ', '‡≤Ö‡≤µ‡≤∞‡≥Å', '‡≤Ö‡≤¶‡≥Å', '‡≤Ø‡≤æ‡≤∞‡≥Å', '‡≤è‡≤®‡≥Å', '‡≤é‡≤≤‡≥ç‡≤≤‡≤ø', '‡≤Ø‡≤æ‡≤µ', '‡≤π‡≥á‡≤ó‡≥Ü', '‡≤Ø‡≤æ‡≤µ‡≤æ‡≤ó', '‡≤é‡≤∑‡≥ç‡≤ü‡≥Å', '‡≤Ü', '‡≤á', '‡≤â', '‡≤é', '‡≤í'])

# Function to preprocess user text (tokenize, remove stopwords, and filter Kannada words)
def preprocess_text(text):
    tokens = word_tokenize(text)
    tokens = [token for token in tokens if token.lower() not in kannada_stopwords and re.match(r'[\u0C80-\u0CFF]+', token)]
    return tokens

# Extract city name using fuzzy matching
def extract_city_name(tokens):
    potential_cities = [word for word in tokens]
    for token in potential_cities:
        for kannada_city, variations in city_names.items():
            if fuzz.partial_ratio(token.lower(), kannada_city.lower()) > 80 or any(fuzz.partial_ratio(token.lower(), city.lower()) > 80 for city in variations):
                return variations[0]
    return None

# Convert Kelvin to Celsius
def kelvin_to_celsius(kelvin):
    return round(kelvin - 273.15, 1)

# Fetch weather data from OpenWeather API
def get_weather_data(location):
    try:
        params = {
            'q': location,
            'appid': API_KEY,
            'lang': 'kn'
        }
        response = requests.get(BASE_URL, params=params)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        print(f"Error fetching weather data: {e}")
        return None

# Format weather response in Kannada
def format_weather_response(weather_data):
    if weather_data is None:
        return "‡≤ï‡≥ç‡≤∑‡≤Æ‡≤ø‡≤∏‡≤ø, ‡≤π‡≤µ‡≤æ‡≤Æ‡≤æ‡≤® ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≤°‡≥Ü‡≤Ø‡≤≤‡≥Å ‡≤∏‡≤æ‡≤ß‡≥ç‡≤Ø‡≤µ‡≤æ‡≤ó‡≤≤‡≤ø‡≤≤‡≥ç‡≤≤."

    try:
        city = weather_data['name']
        temp = kelvin_to_celsius(weather_data['main']['temp'])
        feels_like = kelvin_to_celsius(weather_data['main']['feels_like'])
        humidity = weather_data['main']['humidity']
        wind_speed = weather_data['wind']['speed']
        description = weather_data['weather'][0]['description']

        weather_descriptions = {
            "clear sky": "‡≤∏‡≥ç‡≤™‡≤∑‡≥ç‡≤ü ‡≤Ü‡≤ï‡≤æ‡≤∂",
            "few clouds": "‡≤ö‡≤ø‡≤Ç‡≤ü‡≥Å ‡≤Æ‡≥ã‡≤°",
            "scattered clouds": "‡≤µ‡≤ø‡≤§‡≤∞‡≤ø‡≤§ ‡≤Æ‡≥ã‡≤°",
            "broken clouds": "‡≤¨‡≤ø‡≤∞‡≥Å‡≤ï‡≥Å ‡≤Æ‡≥Ç‡≤°‡≤ø‡≤¶ ‡≤Æ‡≥ã‡≤°",
            "shower rain": "‡≤Æ‡≤≥‡≥Ü‡≤Ø ‡≤§‡≥ã‡≤≥",
            "rain": "‡≤Æ‡≤≥‡≥Ü",
            "thunderstorm": "‡≤Æ‡≤≥‡≥Ü‡≤Ø ‡≤§‡≥ã‡≤≥",
            "snow": "‡≤π‡≤ø‡≤Æ",
            "haze": "‡≤Æ‡≤¨‡≥ç‡≤¨‡≥Å",
            "dust": "‡≤Æ‡≤æ‡≤ü‡≥ç‡≤ü‡≥Å",
            "fog": "‡≤Æ‡≤æ‡≤ü‡≥ç‡≤ü‡≥Å",
            "overcast clouds": "‡≤Æ‡≥ã‡≤° ‡≤ï‡≤µ‡≤ø‡≤¶ ‡≤Æ‡≥ã‡≤°‡≤ó‡≤≥‡≥Å",
            "mist": "‡≤Æ‡≤ø‡≤∏‡≥ç‡≤ü‡≥ç"
        }

        description_kannada = weather_descriptions.get(description, description)

        response_lines = [
            f"{city} ‡≤®‡≤≤‡≥ç‡≤≤‡≤ø ‡≤™‡≥ç‡≤∞‡≤∏‡≥ç‡≤§‡≥Å‡≤§ ‡≤π‡≤µ‡≤æ‡≤Æ‡≤æ‡≤®:",
            f"üå°Ô∏è ‡≤§‡≤æ‡≤™‡≤Æ‡≤æ‡≤®: {temp}¬∞C",
            f"ü§î ‡≤Ö‡≤®‡≥Å‡≤≠‡≤µ‡≤ø‡≤∏‡≥Å‡≤µ ‡≤§‡≤æ‡≤™‡≤Æ‡≤æ‡≤®: {feels_like}¬∞C",
            f"üíß ‡≤Ü‡≤∞‡≥ç‡≤¶‡≥ç‡≤∞‡≤§‡≥Ü: {humidity}%",
            f"üå¨Ô∏è ‡≤ó‡≤æ‡≤≥‡≤ø‡≤Ø ‡≤µ‡≥á‡≤ó: {wind_speed} m/s",
            f"üå§Ô∏è ‡≤µ‡≤ø‡≤µ‡≤∞‡≤£‡≥Ü: {description_kannada}"
        ]

        return "\n".join(response_lines)

    except KeyError as e:
        print(f"Error formatting weather data: {e}")
        return "‡≤ï‡≥ç‡≤∑‡≤Æ‡≤ø‡≤∏‡≤ø, ‡≤π‡≤µ‡≤æ‡≤Æ‡≤æ‡≤® ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≤∞‡≤ø‡≤Ø‡≤æ‡≤ó‡≤ø ‡≤™‡≥ç‡≤∞‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≤≤‡≥Å ‡≤∏‡≤æ‡≤ß‡≥ç‡≤Ø‡≤µ‡≤æ‡≤ó‡≤≤‡≤ø‡≤≤‡≥ç‡≤≤."

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/get_weather', methods=['POST'])
def get_weather():
    try:
        user_input = request.form['location']

        tokens = preprocess_text(user_input)
        city = extract_city_name(tokens)

        if city:
            weather_data = get_weather_data(city)
            if weather_data:
                response = format_weather_response(weather_data)
                accuracy = 100  # 100% if we get a valid weather response
            else:
                response = "‡≤ï‡≥ç‡≤∑‡≤Æ‡≤ø‡≤∏‡≤ø, ‡≤®‡≤æ‡≤®‡≥Å ‡≤π‡≤µ‡≤æ‡≤Æ‡≤æ‡≤® ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≤°‡≥Ü‡≤Ø‡≤≤‡≥Å ‡≤∏‡≤æ‡≤ß‡≥ç‡≤Ø‡≤µ‡≤æ‡≤ó‡≤≤‡≤ø‡≤≤‡≥ç‡≤≤."
                accuracy = 0  # 0% if no valid data returned
        else:
            # Fallback: query API with raw input
            weather_data = get_weather_data(user_input)
            if weather_data:
                response = format_weather_response(weather_data)
                accuracy = 100  # 100% if valid weather data is returned
            else:
                response = "‡≤ï‡≥ç‡≤∑‡≤Æ‡≤ø‡≤∏‡≤ø, ‡≤®‡≤æ‡≤®‡≥Å ‡≤π‡≤µ‡≤æ‡≤Æ‡≤æ‡≤® ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≤°‡≥Ü‡≤Ø‡≤≤‡≥Å ‡≤∏‡≤æ‡≤ß‡≥ç‡≤Ø‡≤µ‡≤æ‡≤ó‡≤≤‡≤ø‡≤≤‡≥ç‡≤≤."
                accuracy = 0  # 0% if no valid data returned

        print(f"Real-time accuracy: {accuracy}%")  # Log accuracy
        return jsonify({'response': response, 'accuracy': accuracy})
    except Exception as e:
        print(f"Error in get_weather: {e}")
        return jsonify({'response': "‡≤ï‡≥ç‡≤∑‡≤Æ‡≤ø‡≤∏‡≤ø, ‡≤§‡≤æ‡≤Ç‡≤§‡≥ç‡≤∞‡≤ø‡≤ï ‡≤§‡≥ä‡≤Ç‡≤¶‡≤∞‡≥Ü ‡≤á‡≤¶‡≥Ü. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤®‡≤Ç‡≤§‡≤∞ ‡≤Æ‡≤§‡≥ç‡≤§‡≥Ü ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø."}), 500

if __name__ == '__main__':
    app.run(debug=True)


